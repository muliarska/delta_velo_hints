{"ast":null,"code":"var _jsxFileName = \"/home/slavko/Desktop/UCU_ files/Homework/Year_02/Part 02/WebDesign/React/main-branch/src/Map.js\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport { Map, TileLayer, withLeaflet, MapControl, Marker, Popup } from \"react-leaflet\";\nimport MapInfo from \"./MapInfo\";\nimport Routing from \"./RoutingMachine\";\nimport L from \"leaflet\";\nimport \"leaflet-routing-machine\";\nimport './Icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst accessToken = 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4M29iazA2Z2gycXA4N2pmbDZmangifQ.-g_vE53SD2WrJ6tFX7QHmA';\nvar routing = false;\nvar markers = [];\nvar control;\nvar map = NaN;\nvar modal = document.getElementById(\"myModal\");\nvar directionsStart = document.getElementById(\"directionsStart\");\nvar span = document.getElementsByClassName(\"close\")[0];\nvar badRoadReportButton = document.getElementById(\"badRoadReportButton\");\nvar accidentReportButton = document.getElementById(\"accidentReportButton\");\nvar parkingPlaceReportButton = document.getElementById(\"parkingPlaceReportButton\");\nvar closeButtonReport = document.getElementById(\"closeButtonReport\");\nvar cancelRouteButton = document.getElementById('cancelRouteButton');\nvar startMenuButton = document.getElementById('startMenuButton');\nvar startNewRouteButton = document.getElementById(\"startNewRouteButton\");\nvar closeButton = document.getElementById(\"closeButton\");\n\nfunction onLoad(e) {\n  // map.setView([coordinates], 8);\n  loadDirectionsStart();\n}\n\nfunction loadDirectionsStart(e) {\n  directionsStart.style.display = \"block\";\n}\n\nfunction makeReport(marker) {\n  var response = \"\";\n  modal.style.display = \"block\";\n\n  badRoadReportButton.onclick = function (event) {\n    modal.style.display = \"none\";\n    console.log(\"badRoadReportButton\");\n    response = \"badRoadReportButton\";\n    marker.bindPopup(\"Bad Road\");\n    marker.setIcon(badRoadIcon);\n  };\n\n  accidentReportButton.onclick = function (event) {\n    modal.style.display = \"none\";\n    console.log(\"accidentReportButton\");\n    response = \"accidentReportButton\";\n    marker.bindPopup(\"Accident\");\n    marker.setIcon(accidentIcon);\n  };\n\n  parkingPlaceReportButton.onclick = function (event) {\n    modal.style.display = \"none\";\n    console.log(\"parkingPlaceReportButton\");\n    response = \"parkingPlaceReportButton\";\n    marker.bindPopup(\"Parking Place\");\n    marker.setIcon(parkingIcon);\n  };\n\n  closeButtonReport.onclick = function (event) {\n    modal.style.display = \"none\";\n    console.log(\"Closing\");\n    marker.remove();\n    startMenuButton.style.display = 'inline-block';\n  };\n\n  return response;\n}\n\nstartNewRouteButton.onclick = function (event) {\n  directionsStart.style.display = \"none\";\n  console.log(\"Starting new route\");\n  routing = true;\n};\n\ncloseButton.onclick = function (event) {\n  directionsStart.style.display = \"none\";\n  console.log(\"Closing start screen\");\n  startMenuButton.style.display = 'inline-block';\n}; // When the user clicks on <span> (x), close the modal\n\n\nspan.onclick = function () {\n  modal.style.display = \"none\";\n  directionsStart.style.display = \"none\";\n  startMenuButton.style.display = 'inline-block';\n}; // When the user clicks anywhere outside of the modal, close it\n\n\nwindow.onclick = function (event) {\n  if (event.target == modal) {\n    modal.style.display = \"none\";\n    startMenuButton.style.display = 'inline-block';\n  }\n\n  if (event.target == directionsStart) {\n    directionsStart.style.display = \"none\";\n    startMenuButton.style.display = 'inline-block';\n  }\n};\n\nfunction createRoute(map) {\n  // const { map } = this.props;\n  let leafletElement = L.Routing.control({\n    router: L.Routing.mapbox(accessToken, {\n      unit: 'metric',\n      profile: 'mapbox/cycling',\n      language: 'en',\n      alternatives: true,\n      geometries: 'geojson',\n      controls: {\n        instructions: false\n      },\n      flyTo: false\n    }),\n    waypoints: [L.latLng(16.506, 80.648), L.latLng(17.384, 80.4866), L.latLng(12.971, 77.5945)],\n    // router: new L.Routing.Google(),\n    lineOptions: {\n      styles: [{\n        color: \"gray\",\n        opacity: 0.7,\n        weight: 6\n      }]\n    },\n    addWaypoints: false,\n    draggableWaypoints: true,\n    fitSelectedRoutes: false,\n    showAlternatives: true\n  }).addTo(map.leafletElement);\n  leafletElement.hide();\n}\n\nclass MapComponent extends React.Component {\n  constructor() {\n    super();\n\n    this.saveMap = layer => {\n      map = layer;\n      this.setState({\n        isMapInit: true\n      }); // createRoute(this.map);\n\n      onLoad();\n    };\n\n    this.addMarker = e => {\n      // clearGeoResults();\n      console.log('clicked');\n      var coordinates = e.latlng;\n      const {\n        markers\n      } = this.state;\n      markers.push(coordinates);\n      this.setState({\n        markers\n      });\n\n      if (!routing) {\n        var marker = L.marker(coordinates, {\n          icon: markerIcon\n        }) // .bindLabel('helloworld', { noHide: true })\n        .addTo(map);\n        makeReport(marker);\n      } else {\n        var marker = L.marker(coordinates, {\n          icon: blueIcon\n        }).addTo(map);\n        markers.push(marker);\n\n        if (markers.length == 2) {\n          getDirections(markers);\n        }\n      }\n    };\n\n    this.state = {\n      lat: 17.4,\n      lng: 78.4,\n      zoom: 7,\n      isMapInit: false,\n      markers: []\n    };\n  }\n\n  render() {\n    const {\n      lat,\n      lng,\n      zoom\n    } = this.state;\n    const position = [lat, lng];\n    return /*#__PURE__*/_jsxDEV(Map, {\n      center: position,\n      zoom: zoom,\n      onClick: this.addMarker,\n      ref: this.saveMap,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer // url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      , {\n        url: \"https://api.mapbox.com/styles/v1/mapbox/streets-v11/tiles/{z}/{x}/{y}?access_token=pk.eyJ1Ijoic2xhdmtvcHJ5dHVsYSIsImEiOiJja281cnRmdjQwODl5MnZwZGdmeW1hb3N3In0.mhPtHgPEkyIHhGCQcNJNlA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), this.state.markers.map((position, idx) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: position,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"A pretty CSS3 popup. \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 40\n            }, this), \" Easily customizable.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this)\n      }, `marker-${idx}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MapComponent;","map":{"version":3,"sources":["/home/slavko/Desktop/UCU_ files/Homework/Year_02/Part 02/WebDesign/React/main-branch/src/Map.js"],"names":["React","Component","useState","useEffect","Map","TileLayer","withLeaflet","MapControl","Marker","Popup","MapInfo","Routing","L","accessToken","routing","markers","control","map","NaN","modal","document","getElementById","directionsStart","span","getElementsByClassName","badRoadReportButton","accidentReportButton","parkingPlaceReportButton","closeButtonReport","cancelRouteButton","startMenuButton","startNewRouteButton","closeButton","onLoad","e","loadDirectionsStart","style","display","makeReport","marker","response","onclick","event","console","log","bindPopup","setIcon","badRoadIcon","accidentIcon","parkingIcon","remove","window","target","createRoute","leafletElement","router","mapbox","unit","profile","language","alternatives","geometries","controls","instructions","flyTo","waypoints","latLng","lineOptions","styles","color","opacity","weight","addWaypoints","draggableWaypoints","fitSelectedRoutes","showAlternatives","addTo","hide","MapComponent","constructor","saveMap","layer","setState","isMapInit","addMarker","coordinates","latlng","state","push","icon","markerIcon","blueIcon","length","getDirections","lat","lng","zoom","render","position","idx"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport { Map, TileLayer, withLeaflet, MapControl, Marker, Popup } from \"react-leaflet\";\nimport MapInfo from \"./MapInfo\";\nimport Routing from \"./RoutingMachine\";\nimport L from \"leaflet\";\nimport \"leaflet-routing-machine\";\nimport './Icons'\n\n\nconst accessToken = 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4M29iazA2Z2gycXA4N2pmbDZmangifQ.-g_vE53SD2WrJ6tFX7QHmA';\n\n\nvar routing = false;\nvar markers = [];\nvar control;\nvar map = NaN;\n\nvar modal = document.getElementById(\"myModal\");\nvar directionsStart = document.getElementById(\"directionsStart\");\nvar span = document.getElementsByClassName(\"close\")[0];\n\nvar badRoadReportButton = document.getElementById(\"badRoadReportButton\");\nvar accidentReportButton = document.getElementById(\"accidentReportButton\");\nvar parkingPlaceReportButton = document.getElementById(\"parkingPlaceReportButton\");\nvar closeButtonReport = document.getElementById(\"closeButtonReport\");\n\n\nvar cancelRouteButton = document.getElementById('cancelRouteButton');\nvar startMenuButton = document.getElementById('startMenuButton');\n\n\nvar startNewRouteButton = document.getElementById(\"startNewRouteButton\");\nvar closeButton = document.getElementById(\"closeButton\");\n\n\nfunction onLoad(e) {\n  // map.setView([coordinates], 8);\n  loadDirectionsStart();\n}\n\nfunction loadDirectionsStart (e) {\n  directionsStart.style.display = \"block\";\n}\n\n\nfunction makeReport(marker) {\n  var response = \"\";\n\n  modal.style.display = \"block\";\n\n  badRoadReportButton.onclick = function(event) {\n    modal.style.display = \"none\";\n    console.log(\"badRoadReportButton\")\n    response = \"badRoadReportButton\"\n    marker.bindPopup(\"Bad Road\");\n    marker.setIcon(badRoadIcon);\n  }\n\n  accidentReportButton.onclick = function(event) {\n    modal.style.display = \"none\";\n    console.log(\"accidentReportButton\")\n    response = \"accidentReportButton\"\n    marker.bindPopup(\"Accident\");\n    marker.setIcon(accidentIcon);\n  }\n\n  parkingPlaceReportButton.onclick = function(event) {\n    modal.style.display = \"none\";\n    console.log(\"parkingPlaceReportButton\")\n    response = \"parkingPlaceReportButton\"\n    marker.bindPopup(\"Parking Place\");\n    marker.setIcon(parkingIcon);\n  }\n\n  closeButtonReport.onclick = function(event) {\n    modal.style.display = \"none\";\n    console.log(\"Closing\")\n    marker.remove();\n    startMenuButton.style.display = 'inline-block';\n  }\n\n  return response;\n}\n\n\nstartNewRouteButton.onclick = function(event) {\n  directionsStart.style.display = \"none\";\n  console.log(\"Starting new route\");\n  routing = true;\n}\n\ncloseButton.onclick = function(event) {\n  directionsStart.style.display = \"none\";\n  console.log(\"Closing start screen\")\n  startMenuButton.style.display = 'inline-block';\n}\n\n// When the user clicks on <span> (x), close the modal\nspan.onclick = function() {\n  modal.style.display = \"none\";\n  directionsStart.style.display = \"none\";\n  startMenuButton.style.display = 'inline-block';\n}\n\n// When the user clicks anywhere outside of the modal, close it\nwindow.onclick = function(event) {\n  if (event.target == modal) {\n    modal.style.display = \"none\";\n    startMenuButton.style.display = 'inline-block';\n  }\n  if (event.target == directionsStart) {\n    directionsStart.style.display = \"none\";\n    startMenuButton.style.display = 'inline-block';\n  }\n}\n\n\n\n\n\n\n\n\nfunction createRoute(map) {\n  // const { map } = this.props;\n  let leafletElement = L.Routing.control({\n    router: L.Routing.mapbox(accessToken, {\n      unit: 'metric',\n      profile : 'mapbox/cycling',\n      language: 'en',\n      alternatives: true,\n      geometries: 'geojson',\n      controls: { instructions: false },\n      flyTo: false\n    }),\n    waypoints: [\n      L.latLng(16.506, 80.648),\n      L.latLng(17.384, 80.4866),\n      L.latLng(12.971, 77.5945)\n    ],\n    // router: new L.Routing.Google(),\n    lineOptions: {\n      styles: [\n        {\n          color: \"gray\",\n          opacity: 0.7,\n          weight: 6\n        }\n      ]\n    },\n    addWaypoints: false,\n    draggableWaypoints: true,\n    fitSelectedRoutes: false,\n    showAlternatives: true\n  }).addTo(map.leafletElement);\n  leafletElement.hide();\n}\n\n\n\n\nclass MapComponent extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      lat: 17.4,\n      lng: 78.4,\n      zoom: 7,\n      isMapInit: false,\n\n      markers: []\n    };\n  };\n\n  \n  saveMap = (layer) => {\n    map = layer;\n    this.setState({\n      isMapInit: true\n    });\n\n    // createRoute(this.map);\n    onLoad();\n  };\n\n  addMarker = (e) => {\n    // clearGeoResults();\n    console.log('clicked')\n    var coordinates = e.latlng\n\n    const {markers} = this.state\n    markers.push(coordinates)\n    this.setState({markers})\n  \n    if (!routing) {\n  \n      var marker = L.marker(coordinates, {icon: markerIcon})\n        // .bindLabel('helloworld', { noHide: true })\n        .addTo(map);\n    \n      makeReport(marker);\n  \n    } else {\n\n      \n      var marker = L.marker(coordinates, {icon: blueIcon})\n        .addTo(map);\n      markers.push(marker);\n  \n      if (markers.length == 2) {\n        getDirections(markers);\n      }\n  \n    }\n  }\n  \n\n\n  render() {\n    const { lat, lng, zoom } = this.state;\n    const position = [lat, lng];\n\n    return (\n      <Map \n        center={position} \n        zoom={zoom} \n        onClick={this.addMarker}\n        ref={this.saveMap}>\n        <TileLayer\n          // url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          url=\"https://api.mapbox.com/styles/v1/mapbox/streets-v11/tiles/{z}/{x}/{y}?access_token=pk.eyJ1Ijoic2xhdmtvcHJ5dHVsYSIsImEiOiJja281cnRmdjQwODl5MnZwZGdmeW1hb3N3In0.mhPtHgPEkyIHhGCQcNJNlA\"\n        />\n\n        {this.state.markers.map((position, idx) => \n          <Marker key={`marker-${idx}`} position={position}>\n          <Popup>\n            <span>A pretty CSS3 popup. <br/> Easily customizable.</span>\n          </Popup>\n        </Marker>\n        )}\n\n      </Map>\n    );\n  }\n}\n\n\n\n\nexport default MapComponent;\n"]},"metadata":{},"sourceType":"module"}